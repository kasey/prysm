func (c *BeaconState) XXUnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 2687377 {
		return ssz.ErrSize
	}

	s0 := buf[0:8]              // c.GenesisTime
	s1 := buf[8:40]             // c.GenesisValidatorsRoot
	s2 := buf[40:48]            // c.Slot
	s3 := buf[48:64]            // c.Fork
	s4 := buf[64:176]           // c.LatestBlockHeader
	s5 := buf[176:262320]       // c.BlockRoots
	s6 := buf[262320:524464]    // c.StateRoots
	s8 := buf[524468:524540]    // c.Eth1Data
	s10 := buf[524544:524552]   // c.Eth1DepositIndex
	s13 := buf[524560:2621712]  // c.RandaoMixes
	s14 := buf[2621712:2687248] // c.Slashings
	s17 := buf[2687256:2687257] // c.JustificationBits
	s18 := buf[2687257:2687297] // c.PreviousJustifiedCheckpoint
	s19 := buf[2687297:2687337] // c.CurrentJustifiedCheckpoint
	s20 := buf[2687337:2687377] // c.FinalizedCheckpoint

	v7 := ssz.ReadOffset(buf[524464:524468]) // c.HistoricalRoots
	if v7 < 2687377 {
		return ssz.ErrInvalidVariableOffset
	}
	if v7 > size {
		return ssz.ErrOffset
	}
	v9 := ssz.ReadOffset(buf[524540:524544]) // c.Eth1DataVotes
	if v9 > size || v9 < v7 {
		return ssz.ErrOffset
	}
	v11 := ssz.ReadOffset(buf[524552:524556]) // c.Validators
	if v11 > size || v11 < v9 {
		return ssz.ErrOffset
	}
	v12 := ssz.ReadOffset(buf[524556:524560]) // c.Balances
	if v12 > size || v12 < v11 {
		return ssz.ErrOffset
	}
	v15 := ssz.ReadOffset(buf[2687248:2687252]) // c.PreviousEpochAttestations
	if v15 > size || v15 < v12 {
		return ssz.ErrOffset
	}
	v16 := ssz.ReadOffset(buf[2687252:2687256]) // c.CurrentEpochAttestations
	if v16 > size || v16 < v15 {
		return ssz.ErrOffset
	}
	s7 := buf[v7:v9]    // c.HistoricalRoots
	s9 := buf[v9:v11]   // c.Eth1DataVotes
	s11 := buf[v11:v12] // c.Validators
	s12 := buf[v12:v15] // c.Balances
	s15 := buf[v15:v16] // c.PreviousEpochAttestations
	s16 := buf[v16:]    // c.CurrentEpochAttestations

	// Field 0: GenesisTime
	c.GenesisTime = ssz.UnmarshallUint64(s0)

	// Field 1: GenesisValidatorsRoot
	c.GenesisValidatorsRoot = append([]byte{}, s1...)

	// Field 2: Slot
	c.Slot = prysmaticlabs_eth2_types.Slot(ssz.UnmarshallUint64(s2))

	// Field 3: Fork
	c.Fork = new(prysmaticlabs_prysm_proto_beacon_p2p_v1.Fork)
	if err = c.Fork.UnmarshalSSZ(s3); err != nil {
		return err
	}

	// Field 4: LatestBlockHeader
	c.LatestBlockHeader = new(prysmaticlabs_prysm_proto_eth_v1alpha1.BeaconBlockHeader)
	if err = c.LatestBlockHeader.UnmarshalSSZ(s4); err != nil {
		return err
	}

	// Field 5: BlockRoots
	{
		var tmp []byte
		for i := 0; i < 8192; i++ {
			tmpSlice := s5[i*32 : (1+i)*32]
			tmp = append([]byte{}, tmpSlice...)
			c.BlockRoots = append(c.BlockRoots, tmp)
		}
	}

	// Field 6: StateRoots
	{
		var tmp []byte
		for i := 0; i < 8192; i++ {
			tmpSlice := s6[i*32 : (1+i)*32]
			tmp = append([]byte{}, tmpSlice...)
			c.StateRoots = append(c.StateRoots, tmp)
		}
	}

	// Field 7: HistoricalRoots
	{
		if len(s7)%32 != 0 {
			return fmt.Errorf("misaligned bytes: c.HistoricalRoots length is %d, which is not a multiple of 32", len(s7))
		}
		numElem := len(s7) / 32
		if numElem > 16777216 {
			return fmt.Errorf("ssz-max exceeded: c.HistoricalRoots has %d elements, ssz-max is 16777216", numElem)
		}
		for i := 0; i < numElem; i++ {
			var tmp []byte

			tmpSlice := s7[i*32 : (1+i)*32]
			tmp = append([]byte{}, tmpSlice...)
			c.HistoricalRoots = append(c.HistoricalRoots, tmp)
		}
	}

	// Field 8: Eth1Data
	c.Eth1Data = new(prysmaticlabs_prysm_proto_eth_v1alpha1.Eth1Data)
	if err = c.Eth1Data.UnmarshalSSZ(s8); err != nil {
		return err
	}

	// Field 9: Eth1DataVotes
	{
		if len(s9)%72 != 0 {
			return fmt.Errorf("misaligned bytes: c.Eth1DataVotes length is %d, which is not a multiple of 72", len(s9))
		}
		numElem := len(s9) / 72
		if numElem > 2048 {
			return fmt.Errorf("ssz-max exceeded: c.Eth1DataVotes has %d elements, ssz-max is 2048", numElem)
		}
		for i := 0; i < numElem; i++ {
			var tmp *prysmaticlabs_prysm_proto_eth_v1alpha1.Eth1Data
			tmp = new(prysmaticlabs_prysm_proto_eth_v1alpha1.Eth1Data)
			tmpSlice := s9[i*72 : (1+i)*72]
			if err = tmp.UnmarshalSSZ(tmpSlice); err != nil {
				return err
			}
			c.Eth1DataVotes = append(c.Eth1DataVotes, tmp)
		}
	}

	// Field 10: Eth1DepositIndex
	c.Eth1DepositIndex = ssz.UnmarshallUint64(s10)

	// Field 11: Validators
	{
		if len(s11)%121 != 0 {
			return fmt.Errorf("misaligned bytes: c.Validators length is %d, which is not a multiple of 121", len(s11))
		}
		numElem := len(s11) / 121
		if numElem > 1099511627776 {
			return fmt.Errorf("ssz-max exceeded: c.Validators has %d elements, ssz-max is 1099511627776", numElem)
		}
		for i := 0; i < numElem; i++ {
			var tmp *prysmaticlabs_prysm_proto_eth_v1alpha1.Validator
			tmp = new(prysmaticlabs_prysm_proto_eth_v1alpha1.Validator)
			tmpSlice := s11[i*121 : (1+i)*121]
			if err = tmp.UnmarshalSSZ(tmpSlice); err != nil {
				return err
			}
			c.Validators = append(c.Validators, tmp)
		}
	}

	// Field 12: Balances
	{
		if len(s12)%8 != 0 {
			return fmt.Errorf("misaligned bytes: c.Balances length is %d, which is not a multiple of 8", len(s12))
		}
		numElem := len(s12) / 8
		if numElem > 1099511627776 {
			return fmt.Errorf("ssz-max exceeded: c.Balances has %d elements, ssz-max is 1099511627776", numElem)
		}
		for i := 0; i < numElem; i++ {
			var tmp uint64

			tmpSlice := s12[i*8 : (1+i)*8]
			tmp = ssz.UnmarshallUint64(tmpSlice)
			c.Balances = append(c.Balances, tmp)
		}
	}

	// Field 13: RandaoMixes
	{
		var tmp []byte
		for i := 0; i < 65536; i++ {
			tmpSlice := s13[i*32 : (1+i)*32]
			tmp = append([]byte{}, tmpSlice...)
			c.RandaoMixes = append(c.RandaoMixes, tmp)
		}
	}

	// Field 14: Slashings
	{
		var tmp uint64
		for i := 0; i < 8192; i++ {
			tmpSlice := s14[i*8 : (1+i)*8]
			tmp = ssz.UnmarshallUint64(tmpSlice)
			c.Slashings = append(c.Slashings, tmp)
		}
	}

	// Field 15: PreviousEpochAttestations
	{
		// empty lists are zero length, so make sure there is room for an offset
		// before attempting to unmarshal it
		if len(s15) > 3 {
			firstOffset := ssz.ReadOffset(s15[0:4])
			if firstOffset%4 != 0 {
				return fmt.Errorf("misaligned list bytes: when decoding c.PreviousEpochAttestations, end-of-list offset is %d, which is not a multiple of 4 (offset size)", firstOffset)
			}
			listLen := firstOffset / 4
			if listLen > 4096 {
				return fmt.Errorf("ssz-max exceeded: c.PreviousEpochAttestations has %d elements, ssz-max is 4096", listLen)
			}
			listOffsets := make([]uint64, listLen)
			for i := 0; uint64(i) < listLen; i++ {
				listOffsets[i] = ssz.ReadOffset(s15[i*4 : (i+1)*4])
			}
			for i := 0; i < len(listOffsets); i++ {
				var tmp *prysmaticlabs_prysm_proto_beacon_p2p_v1.PendingAttestation
				tmp = new(prysmaticlabs_prysm_proto_beacon_p2p_v1.PendingAttestation)
				var tmpSlice []byte
				if i+1 == len(listOffsets) {
					tmpSlice = s15[listOffsets[i]:]
				} else {
					tmpSlice = s15[listOffsets[i]:listOffsets[i+1]]
				}
				if err = tmp.UnmarshalSSZ(tmpSlice); err != nil {
					return err
				}
				c.PreviousEpochAttestations = append(c.PreviousEpochAttestations, tmp)
			}
		}
	}

	// Field 16: CurrentEpochAttestations
	{
		// empty lists are zero length, so make sure there is room for an offset
		// before attempting to unmarshal it
		if len(s16) > 3 {
			firstOffset := ssz.ReadOffset(s16[0:4])
			if firstOffset%4 != 0 {
				return fmt.Errorf("misaligned list bytes: when decoding c.CurrentEpochAttestations, end-of-list offset is %d, which is not a multiple of 4 (offset size)", firstOffset)
			}
			listLen := firstOffset / 4
			if listLen > 4096 {
				return fmt.Errorf("ssz-max exceeded: c.CurrentEpochAttestations has %d elements, ssz-max is 4096", listLen)
			}
			listOffsets := make([]uint64, listLen)
			for i := 0; uint64(i) < listLen; i++ {
				listOffsets[i] = ssz.ReadOffset(s16[i*4 : (i+1)*4])
			}
			for i := 0; i < len(listOffsets); i++ {
				var tmp *prysmaticlabs_prysm_proto_beacon_p2p_v1.PendingAttestation
				tmp = new(prysmaticlabs_prysm_proto_beacon_p2p_v1.PendingAttestation)
				var tmpSlice []byte
				if i+1 == len(listOffsets) {
					tmpSlice = s16[listOffsets[i]:]
				} else {
					tmpSlice = s16[listOffsets[i]:listOffsets[i+1]]
				}
				if err = tmp.UnmarshalSSZ(tmpSlice); err != nil {
					return err
				}
				c.CurrentEpochAttestations = append(c.CurrentEpochAttestations, tmp)
			}
		}
	}

	// Field 17: JustificationBits
	c.JustificationBits = append([]byte{}, prysmaticlabs_go_bitfield.Bitvector4(s17)...)

	// Field 18: PreviousJustifiedCheckpoint
	c.PreviousJustifiedCheckpoint = new(prysmaticlabs_prysm_proto_eth_v1alpha1.Checkpoint)
	if err = c.PreviousJustifiedCheckpoint.UnmarshalSSZ(s18); err != nil {
		return err
	}

	// Field 19: CurrentJustifiedCheckpoint
	c.CurrentJustifiedCheckpoint = new(prysmaticlabs_prysm_proto_eth_v1alpha1.Checkpoint)
	if err = c.CurrentJustifiedCheckpoint.UnmarshalSSZ(s19); err != nil {
		return err
	}

	// Field 20: FinalizedCheckpoint
	c.FinalizedCheckpoint = new(prysmaticlabs_prysm_proto_eth_v1alpha1.Checkpoint)
	if err = c.FinalizedCheckpoint.UnmarshalSSZ(s20); err != nil {
		return err
	}
	return err
}
